package com.fiedlercooper.hw3.unitTestingASU;

import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;

import com.fiedlercooper.hw3.unitTestingASU.UnitTestingAsuApplication;

class UnitTestingAsuApplicationTests {
	
	//All tests will have an actual value generated by the class methods
	//All tests will have an expected value set as the desired result
	//All tests will utilize "assertAEquals" to ensure the actual and expected are equal

	@Test  //Tests to verify the first value of both arrays is the same
	void testFirstValue() {
		float actual[] = { (float) 0.345, (float) 0.678, (float) 0.123, (float) 0.456, (float) 0.567, (float) 0.234 };
		float expected[] = { (float) 0.123, (float) 0.234, (float) 0.345, (float) 0.456, (float) 0.567, (float) 0.678 };
		int n = actual.length;
		UnitTestingAsuApplication.bucketSort(actual, n);

		assertEquals(expected[0], actual[0]);
	}

	@Test  //Tests to verify the last value of both arrays is the same
	void testLastValue() {
		float actual[] = { (float) 0.345, (float) 0.678, (float) 0.123, (float) 0.456, (float) 0.567, (float) 0.234 };
		float expected[] = { (float) 0.123, (float) 0.234, (float) 0.345, (float) 0.456, (float) 0.567, (float) 0.678 };
		int n = actual.length;
		UnitTestingAsuApplication.bucketSort(actual, n);

		assertEquals(expected[expected.length - 1], actual[actual.length - 1]);
	}
	
	@Test  //Tests to verify operation with a zero value 
	void testZeroValue() {
		float actual[] = { (float) 0.345, (float) 0.0, (float) 0.123, (float) 0.456, (float) 0.567, (float) 0.234 };
		float expected[] = { (float) 0.0, (float) 0.123, (float) 0.234, (float) 0.345, (float) 0.456, (float) 0.567 };
		int n = actual.length;
		UnitTestingAsuApplication.bucketSort(actual, n);

		assertEquals(expected[0], actual[0]);
	}

	@Test  //Tests to verify that both arrays are the same and share the same values
	void testWholeArray() {
		float actual[] = { (float) 0.345, (float) 0.678, (float) 0.123, (float) 0.456, (float) 0.567, (float) 0.234 };
		float expected[] = { (float) 0.123, (float) 0.234, (float) 0.345, (float) 0.456, (float) 0.567, (float) 0.678 };
		int n = actual.length;
		UnitTestingAsuApplication.bucketSort(actual, n);
		
		// Converted to Array list for better visibility and operation within arrays
		
		ArrayList<Float> actualArray = new ArrayList<Float>();
		for (float el : actual) {
			actualArray.add(el);
		}
		
		ArrayList<Float> expectedArray = new ArrayList<Float>();
		for (float el : expected) {
			expectedArray.add(el);
		}

		assertEquals(expectedArray, actualArray);
	}
	
	@Test  //Tests the first if statement for a length of zero
	void testEmptyArray() {
		float actual[] = {};
		int n = actual.length;
		UnitTestingAsuApplication.bucketSort(actual, n);
		

		assertEquals(n, 0);
	}
}

